import 'dart:io';

import 'package:path/path.dart' as path;

String get _protoPath {
  return '${Directory.current.uri.toFilePath()}lib${Platform.pathSeparator}src${Platform.pathSeparator}gen${Platform.pathSeparator}';
}

String get _newProtoPath {
  return '${Directory.current.uri.toFilePath()}lib${Platform.pathSeparator}protos${Platform.pathSeparator}';
}

Future<Iterable<File>> _getFiles() async {
  const protoDirs = ['app', 'common', 'component', 'module', 'robot', 'service'];
  final List<File> files = [];
  for (final protoDir in protoDirs) {
    final dir = Directory('$_protoPath$protoDir');
    final List<FileSystemEntity> entities = await dir.list(recursive: true).toList();
    files.addAll(entities.whereType<File>());
  }
  return files;
}

Map<String, Iterable<File>> _getDirStructure(Iterable<File> files) {
  final dirNameToFiles = <String, List<File>>{};
  for (final file in files) {
    final path = file.parent.parent.path.replaceAll(_protoPath, '');
    final dirName = path.split(Platform.pathSeparator).first;
    final list = dirNameToFiles[dirName] ?? [];
    list.add(file);
    dirNameToFiles[dirName] = list;
  }
  return dirNameToFiles;
}

Future<void> _createDirs(Iterable<String> dirNames) async {
  for (final dirName in dirNames) {
    await Directory('$_newProtoPath$dirName').create(recursive: true);
  }
}

Map<String, Set<File>> _getFileStructure(Iterable<File> files) {
  final fileNameToExports = <String, Set<File>>{};
  for (final file in files) {
    final fileName = file.path.split(Platform.pathSeparator).last.split('.').first;
    final set = fileNameToExports[fileName] ?? <File>{};
    set.add(file);
    fileNameToExports[fileName] = set;
  }
  return fileNameToExports;
}

Future<void> _populateExports(Map<String, Iterable<File>> dirStructure) async {
  for (final entry in dirStructure.entries) {
    final files = _getFileStructure(entry.value);
    for (final fEntry in files.entries) {
      final file = File('$_newProtoPath${entry.key}${Platform.pathSeparator}${fEntry.key}.dart');
      await file.create(recursive: true);
      final writer = file.openWrite(mode: FileMode.writeOnlyAppend);
      writer.writeAll([
        '/// The proto definitions for ${fEntry.key}',
        'library viam_protos.${entry.key}.${fEntry.key};\n',
        '// THIS FILE IS AUTOMATICALLY GENERATED',
        '// DO NOT OVERWRITE\n',
      ], '\n');
      for (final export in fEntry.value) {
        final relativeExport = path.relative(export.path, from: file.path);
        writer.writeln('export \'$relativeExport\';');
      }
      await writer.close();
    }
  }
}

Future<void> main(List<String> args) async {
  await Directory(_newProtoPath).delete(recursive: true);
  final files = await _getFiles();
  final dirNameToFiles = await _getDirStructure(files);
  await _createDirs(dirNameToFiles.keys);
  await _populateExports(dirNameToFiles);
}
